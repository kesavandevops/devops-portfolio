pipeline {
  agent any

  environment {
    AWS_REGION = 'ap-south-1'
    TF_VAR_aws_region = "${AWS_REGION}"
    TF_IN_AUTOMATION = "true"
  }

  options {
    // Timeout the entire pipeline or individual stages to avoid hanging forever
    timeout(time: 30, unit: 'MINUTES')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Prepare Lambda Package') {
      steps {
        dir('05-serverless-aws') {
          sh 'chmod +x build.sh && ./build.sh'
        }
      }
    }

    stage('Terraform Init') {
      steps {
        dir('05-serverless-aws/terraform') {
          sh '''
            # Force non-interactive mode, avoid migrating backend prompts
            terraform init -input=false -no-color -reconfigure
          '''
        }
      }
    }

    stage('Terraform Validate') {
      steps {
        dir('05-serverless-aws/terraform') {
          sh '''
            # Validate; if it fails, pipeline should error (no hang)
            terraform validate -no-color
          '''
        }
      }
    }

    stage('Terraform Plan') {
      steps {
        dir('05-serverless-aws/terraform') {
          sh '''
            terraform plan -input=false -no-color -out=tfplan.out
          '''
        }
      }
    }

    stage('Terraform Apply') {
      steps {
        dir('05-serverless-aws/terraform') {
          sh '''
            terraform apply -input=false -no-color tfplan.out
          '''
        }
      }
    }
  }

  post {
    always {
      echo "Cleanup tfplan file"
      dir('05-serverless-aws/terraform') {
        sh 'rm -f tfplan.out'
      }
    }
    failure {
      echo "Pipeline failed. Dumping Terraform logs for diagnosis"
      dir('05-serverless-aws/terraform') {
        sh 'ls -la'
        sh 'cat *.log || true'
      }
    }
  }
}
