pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = "ap-south-1"
        TF_WORKDIR = "05-serverless-aws/terraform"
        BUILD_DIR = "05-serverless-aws"
    }

    options {
        timeout(time: 5, unit: 'MINUTES') // prevent pipeline from hanging forever
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Lambda Package') {
            steps {
                dir("${BUILD_DIR}") {
                    sh '''
                        echo "üèóÔ∏è Building Lambda package..."
                        chmod +x build.sh
                        ./build.sh
                    '''
                    sh '''
                        if [ ! -f lambda_package.zip ]; then
                            echo "‚ùå Lambda package not created!"
                            exit 1
                        fi
                    '''
                }
            }
        }

        stage('Verify Build Paths') {
            steps {
                dir("${TF_WORKDIR}") {
                    sh '''
                        echo "üìÇ Verifying paths from Terraform perspective..."
                        ls -l ../lambda_package.zip
                    '''
                }
            }
        }

        stage('Terraform Init') {
            steps {
                dir("${TF_WORKDIR}") {
                    withAWS(credentials: 'aws-credentials-id', region: "${AWS_DEFAULT_REGION}") {
                        sh 'terraform init -input=false'
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir("${TF_WORKDIR}") {
                    withAWS(credentials: 'aws-credentials-id', region: "${AWS_DEFAULT_REGION}") {
                        sh '''
                            echo "üîê Verifying AWS credentials..."
                            aws sts get-caller-identity || { echo '‚ùå AWS credentials not working'; exit 1; }
        
                            echo "üì° Running Terraform Plan..."
                            export TF_LOG=INFO
                            export AWS_REGION=${AWS_DEFAULT_REGION}
        
                            timeout 120s terraform plan -input=false -var-file="terraform.tfvars" -out=tfplan
                            STATUS=$?
        
                            if [ $STATUS -eq 124 ]; then
                                echo "‚ùå Terraform plan timed out after 120s"
                                exit 1
                            elif [ $STATUS -ne 0 ]; then
                                echo "‚ùå Terraform plan failed with exit code $STATUS"
                                exit $STATUS
                            fi
                        '''
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir("${TF_WORKDIR}") {
                    withAWS(credentials: 'aws-credentials-id', region: "${AWS_DEFAULT_REGION}") {
                        sh 'terraform apply -input=false tfplan'
                    }
                }
            }
        }
    }

    post {
        always {
            dir("${TF_WORKDIR}") {
                sh 'terraform output || true'
            }
        }

        failure {
            echo "‚ùå Build or deploy failed."
        }

        success {
            echo "‚úÖ Deployment successful."
        }
    }
}



