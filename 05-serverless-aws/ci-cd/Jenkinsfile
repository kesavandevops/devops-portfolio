pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = "ap-south-1"
        TF_WORKDIR = "05-serverless-aws/terraform"
        AWS_EC2_METADATA_DISABLED = 'true'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Lambda Package') {
            steps {
                dir('05-serverless-aws') {
                    sh 'chmod +x build.sh'
                    sh './build.sh'
                }
            }
        }

        stage('Terraform Init') {
            steps {
                dir("${TF_WORKDIR}") {
                    withAWS(credentials: 'aws-credentials-id', region: "${AWS_DEFAULT_REGION}") {
                        sh 'terraform init -input=false'
                    }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir("${TF_WORKDIR}") {
                    withAWS(credentials: 'aws-credentials-id', region: "${AWS_DEFAULT_REGION}") {
                        sh '''
                          export TF_LOG=DEBUG
                          export TF_LOG_PATH=terraform_debug.log
                        
                          echo "‚è≥ Starting Terraform plan with timeout..."
                        
                          # Start terraform in background and record PID
                          terraform plan -var-file="terraform.tfvars" -out=tfplan &
                          TF_PID=$!
                        
                          # Timeout loop (POSIX-compliant)
                          TIMEOUT=50
                          ELAPSED=0
                        
                          while kill -0 "$TF_PID" 2>/dev/null; do
                            if [ "$ELAPSED" -ge "$TIMEOUT" ]; then
                              echo "‚è±Ô∏è Timeout of ${TIMEOUT}s reached. Sending SIGINT to Terraform (PID: $TF_PID)..."
                              kill -INT "$TF_PID" 2>/dev/null || true
                              sleep 5
                              if kill -0 "$TF_PID" 2>/dev/null; then
                                echo "‚ö†Ô∏è Terraform did not exit after SIGINT. Sending SIGKILL..."
                                kill -KILL "$TF_PID" 2>/dev/null || true
                              fi
                              break
                            fi
                            sleep 1
                            ELAPSED=$((ELAPSED + 1))
                          done
                        
                          echo "‚úÖ Terraform process exited or was killed."
                          echo "üìÑ Contents of terraform_debug.log:"
                          cat terraform_debug.log || echo "‚ö†Ô∏è Log file not found"
                        '''
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir("${TF_WORKDIR}") {
                    withAWS(credentials: 'aws-credentials-id', region: "${AWS_DEFAULT_REGION}") {
                        sh 'terraform apply -input=false tfplan'
                    }
                }
            }
        }
    }

    post {
        always {
            dir("${TF_WORKDIR}") {
                sh 'terraform output'
            }
        }
        failure {
            echo "‚ùå Build or deploy failed."
        }
        success {
            echo "‚úÖ Deployment successful."
        }
    }
}




